{"ast":null,"code":"var _jsxFileName = \"/Users/nishantrana/Downloads/FoodShala-master/src/components/SignUpForm/Client/CustomerSignUp.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./CustomerSignUp.module.css\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport clientSignUpAction from \"../../../bloc/auth/clientSignUp\";\nimport { getClientError, getClientPending, getClientSuccess } from \"../../../store/reducer\";\nimport Input from \"../../Input/Input\";\nimport Button from \"../../UI/Button/Button\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nclass ClientSignUp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      primaryDetails: {\n        firstName: {\n          id: \"1\",\n          elementType: \"input\",\n          label: \"First Name\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        lastName: {\n          id: \"2\",\n          elementType: \"input\",\n          label: \"Last Name\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        username: {\n          id: \"3\",\n          elementType: \"input\",\n          label: \"User Name\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          id: \"4\",\n          elementType: \"input\",\n          label: \"Password\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 8\n          },\n          valid: false,\n          touched: false\n        },\n        preference: {\n          id: \"5\",\n          elementType: \"select\",\n          label: \"Preference\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\",\n            option: [{\n              value: \"\",\n              displayValue: \"Value\"\n            }, {\n              value: \"veg\",\n              displayValue: \"Veg\"\n            }, {\n              value: \"nonVeg\",\n              displayValue: \"Non Veg\"\n            }]\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      errorText: \"\",\n      formIsValid: false,\n      auth: false\n    };\n\n    this.changeHandler = (event, identifierElement) => {\n      const updatedPrimaryDetails = { ...this.state.primaryDetails\n      };\n      const updatedPrimaryDetailsElement = { ...updatedPrimaryDetails[identifierElement]\n      };\n      updatedPrimaryDetailsElement.value = event.target.value;\n      updatedPrimaryDetailsElement.valid = this.checkValid(updatedPrimaryDetailsElement.value, updatedPrimaryDetailsElement.validation);\n      updatedPrimaryDetailsElement.touched = true;\n      updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n      let formIsValid = true;\n\n      for (const item in updatedPrimaryDetails) {\n        if (updatedPrimaryDetails[item].tagHandler) {\n          formIsValid = updatedPrimaryDetails[item].selected.length > 0 && formIsValid;\n          continue;\n        }\n\n        formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n      }\n\n      this.setState({\n        primaryDetails: updatedPrimaryDetails,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.addItemToCheck = identifierElement => {\n      if (this.state.primaryDetails[identifierElement].valid) {\n        const updatedPrimaryDetails = { ...this.state.primaryDetails\n        };\n        const updatedPrimaryDetailsElement = { ...updatedPrimaryDetails[identifierElement]\n        };\n        updatedPrimaryDetailsElement.selected.push(updatedPrimaryDetailsElement.value);\n        updatedPrimaryDetailsElement.value = \"\";\n        updatedPrimaryDetailsElement.valid = false;\n        updatedPrimaryDetailsElement.touched = false;\n        updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n        let formIsValid = true;\n\n        for (const item in updatedPrimaryDetails) {\n          if (typeof updatedPrimaryDetails[item] === \"string\") continue;\n\n          if (updatedPrimaryDetails[item].tagHandler) {\n            formIsValid = updatedPrimaryDetails[item].selected.length > 0 && formIsValid;\n            continue;\n          }\n\n          formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n        }\n\n        this.setState({\n          primaryDetails: updatedPrimaryDetails,\n          formIsValid: formIsValid\n        });\n      }\n    };\n\n    this.removeItemFromCheck = (index, identifierElement) => {\n      const updatedPrimaryDetails = { ...this.state.primaryDetails\n      };\n      const updatedPrimaryDetailsElement = { ...updatedPrimaryDetails[identifierElement]\n      };\n      updatedPrimaryDetailsElement.selected = this.state.primaryDetails[identifierElement].selected.filter((ele, i) => i !== index);\n      updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n      let formIsValid = true;\n\n      for (const item in updatedPrimaryDetails) {\n        if (updatedPrimaryDetails[item].tagHandler) {\n          formIsValid = updatedPrimaryDetails[item].selected.length > 0 && formIsValid;\n          continue;\n        }\n\n        formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n      }\n\n      this.setState({\n        primaryDetails: updatedPrimaryDetails,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.clientSignUpHandler = event => {\n      event.preventDefault();\n      const data = {};\n\n      for (let field in this.state.primaryDetails) {\n        data[field] = this.state.primaryDetails[field].value;\n      }\n\n      data[\"accountType\"] = \"Customer\";\n      this.props.clientSignUp(data);\n    };\n  }\n\n  checkValid(value, rules) {\n    let isValid = false;\n\n    if (rules && rules.required) {\n      isValid = value.trim() !== \"\";\n    }\n\n    if (rules && rules.minLength) {\n      isValid = isValid && value.trim().length >= rules.minLength;\n\n      if (!isValid || rules.minLength > value.trim().lenght) {\n        this.setState({\n          errorText: \"Password requires atleast 8 characters\"\n        });\n      } else {\n        this.setState({\n          errorText: \"\"\n        });\n      }\n    }\n\n    return isValid;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.auth !== prevProps.auth) {\n      this.setState({\n        auth: true\n      }); // setTimeout(() => {\n      //     this.props.cancel();\n      //     setTimeout(() => {\n      //         this.props.change()\n      //     }, 500);\n      // }, 1500)\n    } else if (this.props.error !== prevProps.error) {\n      this.setState({\n        errorText: \"UserName is already taken.\"\n      });\n      const updatedPrimaryDetails = { ...this.state.primaryDetails\n      };\n\n      for (let field in updatedPrimaryDetails) {\n        updatedPrimaryDetails[field].value = \"\";\n      }\n\n      this.setState({\n        primaryDetails: updatedPrimaryDetails,\n        formIsValid: false\n      });\n    }\n  }\n\n  render() {\n    let formElements = [];\n\n    for (let item in this.state.primaryDetails) {\n      formElements.push({\n        id: item,\n        config: this.state.primaryDetails[item]\n      });\n    }\n\n    let button = /*#__PURE__*/React.createElement(Button, {\n      fill: true,\n      disabled: !this.state.formIsValid,\n      config: {\n        type: \"button\"\n      },\n      clicked: event => this.clientSignUpHandler(event),\n      name: this.props.pending ? /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 36\n        }\n      }) : \"Sign Up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 22\n      }\n    });\n    let form = formElements.map(formElement => {\n      return /*#__PURE__*/React.createElement(Input, {\n        key: formElement.id,\n        changed: event => this.changeHandler(event, formElement.id),\n        label: formElement.config.label,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        addTag: () => this.addItemToCheck(formElement.id),\n        removeTag: index => {\n          this.removeItemFromCheck(index, formElement.id);\n        },\n        isTag: formElement.config.tagHandler,\n        selected: formElement.config.selected,\n        analyzeText: formElement.config.analyzeText,\n        shouldValidate: formElement.config.validation,\n        invalid: !formElement.config.valid,\n        touched: formElement.config.touched,\n        imgSrc: formElement.config.imgSrc,\n        actions: formElement.config.actions,\n        isPassword: formElement.config.isPassword,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 17\n        }\n      });\n    });\n\n    if (this.state.auth) {\n      form = /*#__PURE__*/React.createElement(\"h1\", {\n        style: {\n          color: \"green\",\n          width: \"100%\",\n          height: \"20rem\",\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 17\n        }\n      }, \" \", \"Successfully Registered\");\n      button = /*#__PURE__*/React.createElement(NavLink, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 22\n        }\n      }, \"Home\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: classes.Client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }\n    }, this.state.errorText), form, \" \", button, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }\n    }, \"Already registered!!??\", \" \", /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.props.change,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 21\n      }\n    }, \"Sign In here!\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  error: getClientError(state),\n  pending: getClientPending(state),\n  auth: getClientSuccess(state)\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  clientSignUp: clientSignUpAction\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClientSignUp);","map":{"version":3,"sources":["/Users/nishantrana/Downloads/FoodShala-master/src/components/SignUpForm/Client/CustomerSignUp.js"],"names":["React","Component","classes","connect","bindActionCreators","clientSignUpAction","getClientError","getClientPending","getClientSuccess","Input","Button","Spinner","ClientSignUp","state","primaryDetails","firstName","id","elementType","label","elementConfig","type","placeholder","value","validation","required","valid","touched","lastName","username","password","minLength","preference","option","displayValue","errorText","formIsValid","auth","changeHandler","event","identifierElement","updatedPrimaryDetails","updatedPrimaryDetailsElement","target","checkValid","item","tagHandler","selected","length","setState","addItemToCheck","push","removeItemFromCheck","index","filter","ele","i","clientSignUpHandler","preventDefault","data","field","props","clientSignUp","rules","isValid","trim","lenght","componentDidUpdate","prevProps","prevState","error","render","formElements","config","button","pending","form","map","formElement","analyzeText","imgSrc","actions","isPassword","color","width","height","textAlign","Client","change","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport classes from \"./CustomerSignUp.module.css\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport clientSignUpAction from \"../../../bloc/auth/clientSignUp\";\nimport {\n    getClientError,\n    getClientPending,\n    getClientSuccess,\n} from \"../../../store/reducer\";\n\nimport Input from \"../../Input/Input\";\nimport Button from \"../../UI/Button/Button\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nclass ClientSignUp extends Component {\n    state = {\n        primaryDetails: {\n            firstName: {\n                id: \"1\",\n                elementType: \"input\",\n                label: \"First Name\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            lastName: {\n                id: \"2\",\n                elementType: \"input\",\n                label: \"Last Name\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            username: {\n                id: \"3\",\n                elementType: \"input\",\n                label: \"User Name\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            password: {\n                id: \"4\",\n                elementType: \"input\",\n                label: \"Password\",\n                elementConfig: {\n                    type: \"password\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    minLength: 8,\n                },\n                valid: false,\n                touched: false,\n            },\n            preference: {\n                id: \"5\",\n                elementType: \"select\",\n                label: \"Preference\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                    option: [\n                        { value: \"\", displayValue: \"Value\" },\n                        {\n                            value: \"veg\",\n                            displayValue: \"Veg\",\n                        },\n                        {\n                            value: \"nonVeg\",\n                            displayValue: \"Non Veg\",\n                        },\n                    ],\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        errorText: \"\",\n        formIsValid: false,\n        auth: false,\n    };\n\n    checkValid(value, rules) {\n        let isValid = false;\n        if (rules && rules.required) {\n            isValid = value.trim() !== \"\";\n        }\n        if (rules && rules.minLength) {\n            isValid = isValid && value.trim().length >= rules.minLength;\n            if (!isValid || rules.minLength > value.trim().lenght) {\n                this.setState({\n                    errorText: \"Password requires atleast 8 characters\",\n                });\n            } else {\n                this.setState({\n                    errorText: \"\",\n                });\n            }\n        }\n\n        return isValid;\n    }\n\n    changeHandler = (event, identifierElement) => {\n        const updatedPrimaryDetails = {\n            ...this.state.primaryDetails,\n        };\n\n        const updatedPrimaryDetailsElement = {\n            ...updatedPrimaryDetails[identifierElement],\n        };\n\n        updatedPrimaryDetailsElement.value = event.target.value;\n        updatedPrimaryDetailsElement.valid = this.checkValid(\n            updatedPrimaryDetailsElement.value,\n            updatedPrimaryDetailsElement.validation\n        );\n        updatedPrimaryDetailsElement.touched = true;\n        updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n\n        let formIsValid = true;\n        for (const item in updatedPrimaryDetails) {\n            if (updatedPrimaryDetails[item].tagHandler) {\n                formIsValid =\n                    updatedPrimaryDetails[item].selected.length > 0 &&\n                    formIsValid;\n                continue;\n            }\n            formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n        }\n\n        this.setState({\n            primaryDetails: updatedPrimaryDetails,\n            formIsValid: formIsValid,\n        });\n    };\n\n    addItemToCheck = (identifierElement) => {\n        if (this.state.primaryDetails[identifierElement].valid) {\n            const updatedPrimaryDetails = {\n                ...this.state.primaryDetails,\n            };\n\n            const updatedPrimaryDetailsElement = {\n                ...updatedPrimaryDetails[identifierElement],\n            };\n\n            updatedPrimaryDetailsElement.selected.push(\n                updatedPrimaryDetailsElement.value\n            );\n            updatedPrimaryDetailsElement.value = \"\";\n            updatedPrimaryDetailsElement.valid = false;\n            updatedPrimaryDetailsElement.touched = false;\n            updatedPrimaryDetails[\n                identifierElement\n            ] = updatedPrimaryDetailsElement;\n            let formIsValid = true;\n            for (const item in updatedPrimaryDetails) {\n                if (typeof updatedPrimaryDetails[item] === \"string\") continue;\n                if (updatedPrimaryDetails[item].tagHandler) {\n                    formIsValid =\n                        updatedPrimaryDetails[item].selected.length > 0 &&\n                        formIsValid;\n                    continue;\n                }\n                formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n            }\n\n            this.setState({\n                primaryDetails: updatedPrimaryDetails,\n                formIsValid: formIsValid,\n            });\n        }\n    };\n\n    removeItemFromCheck = (index, identifierElement) => {\n        const updatedPrimaryDetails = {\n            ...this.state.primaryDetails,\n        };\n\n        const updatedPrimaryDetailsElement = {\n            ...updatedPrimaryDetails[identifierElement],\n        };\n\n        updatedPrimaryDetailsElement.selected = this.state.primaryDetails[\n            identifierElement\n        ].selected.filter((ele, i) => i !== index);\n\n        updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n\n        let formIsValid = true;\n\n        for (const item in updatedPrimaryDetails) {\n            if (updatedPrimaryDetails[item].tagHandler) {\n                formIsValid =\n                    updatedPrimaryDetails[item].selected.length > 0 &&\n                    formIsValid;\n                continue;\n            }\n            formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n        }\n\n        this.setState({\n            primaryDetails: updatedPrimaryDetails,\n            formIsValid: formIsValid,\n        });\n    };\n\n    clientSignUpHandler = (event) => {\n        event.preventDefault();\n        const data = {};\n\n        for (let field in this.state.primaryDetails) {\n            data[field] = this.state.primaryDetails[field].value;\n        }\n\n        data[\"accountType\"] = \"Customer\";\n\n        this.props.clientSignUp(data);\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.auth !== prevProps.auth) {\n            this.setState({ auth: true });\n            // setTimeout(() => {\n            //     this.props.cancel();\n            //     setTimeout(() => {\n            //         this.props.change()\n            //     }, 500);\n            // }, 1500)\n        } else if (this.props.error !== prevProps.error) {\n            this.setState({\n                errorText: \"UserName is already taken.\",\n            });\n            const updatedPrimaryDetails = {\n                ...this.state.primaryDetails,\n            };\n            for (let field in updatedPrimaryDetails) {\n                updatedPrimaryDetails[field].value = \"\";\n            }\n\n            this.setState({\n                primaryDetails: updatedPrimaryDetails,\n                formIsValid: false,\n            });\n        }\n    }\n\n    render() {\n        let formElements = [];\n\n        for (let item in this.state.primaryDetails) {\n            formElements.push({\n                id: item,\n                config: this.state.primaryDetails[item],\n            });\n        }\n        let button = <Button\n        fill\n        disabled={!this.state.formIsValid}\n        config={{ type: \"button\" }}\n        clicked={(event) => this.clientSignUpHandler(event)}\n        name={this.props.pending ? <Spinner /> : \"Sign Up\"}\n    />\n\n        let form = formElements.map((formElement) => {\n            return (\n                <Input\n                    key={formElement.id}\n                    changed={(event) =>\n                        this.changeHandler(event, formElement.id)\n                    }\n                    label={formElement.config.label}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    addTag={() => this.addItemToCheck(formElement.id)}\n                    removeTag={(index) => {\n                        this.removeItemFromCheck(index, formElement.id);\n                    }}\n                    isTag={formElement.config.tagHandler}\n                    selected={formElement.config.selected}\n                    analyzeText={formElement.config.analyzeText}\n                    shouldValidate={formElement.config.validation}\n                    invalid={!formElement.config.valid}\n                    touched={formElement.config.touched}\n                    imgSrc={formElement.config.imgSrc}\n                    actions={formElement.config.actions}\n                    isPassword={formElement.config.isPassword}\n                />\n            );\n        });\n\n        if (this.state.auth) {\n            form = (\n                <h1\n                    style={{\n                        color: \"green\",\n                        width: \"100%\",\n                        height: \"20rem\",\n                        textAlign: \"center\",\n                    }}\n                >\n                    {\" \"}\n                    Successfully Registered\n                </h1>\n            );\n            button = <NavLink\n       \n            to=\"/\"\n            \n        >\n            Home\n        </NavLink>\n        }\n\n        return (\n            <form className={classes.Client}>\n                <h5>{this.state.errorText}</h5>\n                {form}{\" \"}\n                {button}\n                <h3>\n                    Already registered!!??{\" \"}\n                    <div onClick={this.props.change}>Sign In here!</div>\n                </h3>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    error: getClientError(state),\n    pending: getClientPending(state),\n    auth: getClientSuccess(state),\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            clientSignUp: clientSignUpAction,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClientSignUp);\n"]},"metadata":{},"sourceType":"module"}