{"ast":null,"code":"var _jsxFileName = \"/Users/nishantrana/Downloads/FoodShala-master/src/components/My Orders/MyOrders.js\";\nimport React, { Component } from 'react';\nimport { getClients, getUser, getOrdersError, getOrdersPending, getOrdersSuccess } from \"../../store/reducer\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport fetchOrdersAction from \"../../bloc/fetchOrders\";\nimport orderStatusHandlerAction from '../../bloc/orderStatusHandler';\nimport classes from './MyOrders.module.css';\nimport { withRouter } from \"react-router-dom\";\nimport OrderCard from '../UI/OrderCard/OrderCard';\n\nclass MyOrders extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orders: []\n    };\n\n    this.statusHandler = id => {\n      const data = {};\n\n      for (let order of this.state.orders) {\n        if (order.id === id) {\n          data[\"status\"] = order.status === \"pending\" ? \"delivered\" : \"delivered\";\n          break;\n        }\n      }\n\n      const updatedOrder = [...this.state.orders];\n\n      for (let order of updatedOrder) {\n        if (order.id === id) {\n          order.status = order.status === \"pending\" ? \"delivered\" : \"delivered\";\n        }\n      }\n\n      this.setState({\n        orders: updatedOrder\n      });\n      this.props.orderStatusHandler(data, id);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.user) this.props.fetchOrders(this.props.user);else {\n      this.props.history.replace('/');\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.orders !== this.props.orders) {\n      if (this.props.orders.length) {\n        let orders = [];\n        let restaurantName = \"\";\n\n        for (let order of this.props.orders) {\n          for (const restaurant of this.props.restaurants) {\n            if (order.restaurantId === restaurant.id) {\n              restaurantName = restaurant.restaurantName;\n              break;\n            }\n          }\n        }\n\n        for (const order of this.props.orders) {\n          orders.push({\n            id: order.id,\n            name: restaurantName,\n            products: { ...order.products\n            },\n            price: order.price,\n            status: order.status\n          });\n        }\n\n        this.setState({\n          orders\n        });\n      }\n    }\n  }\n\n  render() {\n    if (this.props.ordersPending) {\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 20\n        }\n      }, \"Please wait while we fetch your orders\");\n    }\n\n    if (this.state.orders.length === 0) {\n      return this.props.user && this.props.user.accountType === \"Customer\" ? /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 83\n        }\n      }, \"You have not ordered yet.. Please Start Ordering\") : /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 142\n        }\n      }, \"No Orders have been placed by customers\");\n    }\n\n    const orders = [];\n    this.state.orders.forEach(order => orders.push( /*#__PURE__*/React.createElement(OrderCard, Object.assign({\n      statusHandler: () => this.statusHandler(order.id),\n      restaurant: this.props.user.accountType\n    }, order, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }))));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, orders);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: getUser(state),\n  restaurants: getClients(state),\n  orders: getOrdersSuccess(state),\n  ordersPending: getOrdersPending(state),\n  ordersError: getOrdersError(state)\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  fetchOrders: fetchOrdersAction,\n  orderStatusHandler: orderStatusHandlerAction\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(MyOrders));","map":{"version":3,"sources":["/Users/nishantrana/Downloads/FoodShala-master/src/components/My Orders/MyOrders.js"],"names":["React","Component","getClients","getUser","getOrdersError","getOrdersPending","getOrdersSuccess","connect","bindActionCreators","fetchOrdersAction","orderStatusHandlerAction","classes","withRouter","OrderCard","MyOrders","state","orders","statusHandler","id","data","order","status","updatedOrder","setState","props","orderStatusHandler","componentDidMount","user","fetchOrders","history","replace","componentDidUpdate","prevProps","length","restaurantName","restaurant","restaurants","restaurantId","push","name","products","price","render","ordersPending","accountType","forEach","Card","mapStateToProps","ordersError","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport {\n    getClients,\n    getUser,\n    getOrdersError,\n    getOrdersPending,\n    getOrdersSuccess,\n} from \"../../store/reducer\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport fetchOrdersAction from \"../../bloc/fetchOrders\";\nimport orderStatusHandlerAction from '../../bloc/orderStatusHandler'\n\nimport classes from './MyOrders.module.css'\n\nimport { withRouter } from \"react-router-dom\";\nimport OrderCard from '../UI/OrderCard/OrderCard';\nclass MyOrders extends Component {\n\n    state = {\n        orders: []\n    }\n\n    componentDidMount() {\n        if(this.props.user)\n        this.props.fetchOrders(this.props.user)\n        else {\n            this.props.history.replace('/')\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if(prevProps.orders !== this.props.orders){\n            \n            if(this.props.orders.length){\n                let orders = []\n                let restaurantName = \"\";\n                for(let order of this.props.orders) {\n                    for (const restaurant of this.props.restaurants) {\n                    if(order.restaurantId === restaurant.id){\n                        restaurantName = restaurant.restaurantName;\n                        break;\n                    }\n                }\n                }\n                for (const order of this.props.orders) {\n                    orders.push( {\n                        id:order.id,\n                        name: restaurantName,\n                        products: {...order.products},\n                        price: order.price,\n                        status: order.status\n                    })\n                }\n                this.setState({orders})\n            }\n        }\n    }\n\n    statusHandler =(id) => {\n\n        const data = {}\n\n        \n        for(let order of this.state.orders) {\n            if(order.id === id){\n                data[\"status\"] = order.status === \"pending\" ? \"delivered\" : \"delivered\";\n                break\n            }\n        }\n\n        const updatedOrder = [...this.state.orders];\n\n        for(let order of updatedOrder) {\n            if(order.id === id){\n                order.status =\n                    order.status === \"pending\" ? \"delivered\" : \"delivered\";\n            }\n        }\n        \n        this.setState({orders:updatedOrder})\n\n\n        \n        this.props.orderStatusHandler(data,id);\n    }\n\n    render() {\n\n        if(this.props.ordersPending){\n            return <h1>Please wait while we fetch your orders</h1>\n        }\n\n        if(this.state.orders.length === 0){\n            return this.props.user && this.props.user.accountType === \"Customer\" ?<h1>You have not ordered yet.. Please Start Ordering</h1>: <h1>No Orders have been placed by customers</h1>\n        }\n\n        const orders = [];\n\n\n\n        this.state.orders.forEach(\n           order =>  orders.push(\n                <OrderCard statusHandler={() => this.statusHandler(order.id)} restaurant={this.props.user.accountType} {...order}/>\n            )\n        )\n\n        return (\n            <div className={classes.Card}>\n                {orders}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    user: getUser(state),\n    restaurants: getClients(state),\n    orders: getOrdersSuccess(state),\n    ordersPending: getOrdersPending(state),\n    ordersError: getOrdersError(state),\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            fetchOrders:fetchOrdersAction,\n            orderStatusHandler: orderStatusHandlerAction\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(MyOrders));"]},"metadata":{},"sourceType":"module"}