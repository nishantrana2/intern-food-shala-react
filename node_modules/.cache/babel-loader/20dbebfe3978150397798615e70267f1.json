{"ast":null,"code":"var _jsxFileName = \"/Users/nishantrana/Downloads/FoodShala-master/src/components/SignUpForm/Customer/ClientSignUp.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./ClientSignUp.module.css\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport customerSignUpAction from \"../../../bloc/auth/customerSignUp\";\nimport { getCustomerError, getCustomerPending, getCustomerSuccess } from \"../../../store/reducer\";\nimport Input from \"../../Input/Input\";\nimport Button from \"../../UI/Button/Button\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\nimport { Redirect } from \"react-router-dom\";\n\nclass CustomerSignUp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      primaryDetails: {\n        firstName: {\n          id: \"1\",\n          elementType: \"input\",\n          label: \"First Name\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        lastName: {\n          id: \"2\",\n          elementType: \"input\",\n          label: \"Last Name\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        restaurantName: {\n          id: \"3\",\n          elementType: \"input\",\n          label: \"Restaurant Name\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        username: {\n          id: \"4\",\n          elementType: \"input\",\n          label: \"User Name\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          id: \"5\",\n          elementType: \"input\",\n          label: \"Password\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        cusines: {\n          id: \"6\",\n          elementType: \"input\",\n          label: \"Cusines\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\"\n          },\n          tagHandler: true,\n          selected: [],\n          value: \"\",\n          actions: true,\n          isTag: true,\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      errorText: \"\"\n    };\n\n    this.changeHandler = (event, identifierElement) => {\n      const updatedPrimaryDetails = { ...this.state.primaryDetails\n      };\n      const updatedPrimaryDetailsElement = { ...updatedPrimaryDetails[identifierElement]\n      };\n      updatedPrimaryDetailsElement.value = event.target.value;\n      updatedPrimaryDetailsElement.valid = this.checkValid(updatedPrimaryDetailsElement.value, updatedPrimaryDetailsElement.validation);\n      updatedPrimaryDetailsElement.touched = true;\n      updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n      let formIsValid = true;\n\n      for (const item in updatedPrimaryDetails) {\n        if (updatedPrimaryDetails[item].tagHandler) {\n          formIsValid = updatedPrimaryDetails[item].selected.length > 0 && formIsValid;\n          continue;\n        }\n\n        formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n      }\n\n      this.setState({\n        primaryDetails: updatedPrimaryDetails,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.addItemToCheck = identifierElement => {\n      if (this.state.primaryDetails[identifierElement].valid) {\n        const updatedPrimaryDetails = { ...this.state.primaryDetails\n        };\n        const updatedPrimaryDetailsElement = { ...updatedPrimaryDetails[identifierElement]\n        };\n        updatedPrimaryDetailsElement.selected.push(updatedPrimaryDetailsElement.value);\n        updatedPrimaryDetailsElement.value = \"\";\n        updatedPrimaryDetailsElement.valid = false;\n        updatedPrimaryDetailsElement.touched = false;\n        updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n        let formIsValid = true;\n\n        for (const item in updatedPrimaryDetails) {\n          if (typeof updatedPrimaryDetails[item] === \"string\") continue;\n\n          if (updatedPrimaryDetails[item].tagHandler) {\n            formIsValid = updatedPrimaryDetails[item].selected.length > 0 && formIsValid;\n            continue;\n          }\n\n          formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n        }\n\n        this.setState({\n          primaryDetails: updatedPrimaryDetails,\n          formIsValid: formIsValid\n        });\n      }\n    };\n\n    this.removeItemFromCheck = (index, identifierElement) => {\n      const updatedPrimaryDetails = { ...this.state.primaryDetails\n      };\n      const updatedPrimaryDetailsElement = { ...updatedPrimaryDetails[identifierElement]\n      };\n      updatedPrimaryDetailsElement.selected = this.state.primaryDetails[identifierElement].selected.filter((ele, i) => i !== index);\n      updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n      let formIsValid = true;\n\n      for (const item in updatedPrimaryDetails) {\n        if (updatedPrimaryDetails[item].tagHandler) {\n          formIsValid = updatedPrimaryDetails[item].selected.length > 0 && formIsValid;\n          continue;\n        }\n\n        formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n      }\n\n      this.setState({\n        primaryDetails: updatedPrimaryDetails,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.clientSignUpHandler = event => {\n      event.preventDefault();\n      const data = {};\n\n      for (let field in this.state.primaryDetails) {\n        if (this.state.primaryDetails[field].isTag) {\n          data[field] = this.state.primaryDetails[field].selected;\n          continue;\n        }\n\n        data[field] = this.state.primaryDetails[field].value;\n      }\n\n      data[\"accountType\"] = \"Restaurant\";\n      this.props.customerSignUp(data);\n    };\n  }\n\n  checkValid(value, rules) {\n    let isValid = false;\n\n    if (rules && rules.required) {\n      isValid = value.trim() !== \"\";\n    }\n\n    if (rules && rules.minLength) {\n      isValid = isValid && value.trim().length >= rules.minLength;\n    }\n\n    return isValid;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.auth !== prevProps.auth) {\n      this.setState({\n        auth: true\n      }); // setTimeout(() => {\n      //     this.props.cancel();\n      //     setTimeout(() => {\n      //         this.props.change();\n      //     }, 500);\n      // }, 1500);\n    } else if (this.props.error !== prevProps.error) {\n      this.setState({\n        errorText: \"UserName is already taken.\"\n      });\n      const updatedPrimaryDetails = { ...this.state.primaryDetails\n      };\n\n      for (let field in updatedPrimaryDetails) {\n        updatedPrimaryDetails[field].value = \"\";\n      }\n\n      this.setState({\n        primaryDetails: updatedPrimaryDetails,\n        formIsValid: false\n      });\n    }\n  }\n\n  render() {\n    let formElements = [];\n\n    for (let item in this.state.primaryDetails) {\n      formElements.push({\n        id: item,\n        config: this.state.primaryDetails[item]\n      });\n    }\n\n    let form = formElements.map(formElement => {\n      return /*#__PURE__*/React.createElement(Input, {\n        key: formElement.id,\n        changed: event => this.changeHandler(event, formElement.id),\n        label: formElement.config.label,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        addTag: () => this.addItemToCheck(formElement.id),\n        removeTag: index => {\n          this.removeItemFromCheck(index, formElement.id);\n        },\n        isTag: formElement.config.tagHandler,\n        selected: formElement.config.selected,\n        analyzeText: formElement.config.analyzeText,\n        shouldValidate: formElement.config.validation,\n        invalid: !formElement.config.valid,\n        touched: formElement.config.touched,\n        actions: formElement.config.actions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 17\n        }\n      });\n    });\n\n    if (this.state.auth) {\n      form = /*#__PURE__*/React.createElement(\"h1\", {\n        style: {\n          color: \"green\",\n          width: \"100%\",\n          height: \"20rem\",\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 17\n        }\n      }, \" \", \"Successfully Registered\");\n      this.props.history.replace(\"/\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: classes.Customer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }\n    }, this.state.errorText), form, /*#__PURE__*/React.createElement(Button, {\n      fill: true,\n      disabled: !this.state.formIsValid,\n      config: {\n        type: \"button\"\n      },\n      clicked: event => this.clientSignUpHandler(event),\n      name: this.props.pending ? /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 48\n        }\n      }) : \"Sign Up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  error: getCustomerError(state),\n  pending: getCustomerPending(state),\n  auth: getCustomerSuccess(state)\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  customerSignUp: customerSignUpAction\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerSignUp);","map":{"version":3,"sources":["/Users/nishantrana/Downloads/FoodShala-master/src/components/SignUpForm/Customer/ClientSignUp.js"],"names":["React","Component","classes","connect","bindActionCreators","customerSignUpAction","getCustomerError","getCustomerPending","getCustomerSuccess","Input","Button","Spinner","Redirect","CustomerSignUp","state","primaryDetails","firstName","id","elementType","label","elementConfig","type","placeholder","value","validation","required","valid","touched","lastName","restaurantName","username","password","cusines","tagHandler","selected","actions","isTag","formIsValid","errorText","changeHandler","event","identifierElement","updatedPrimaryDetails","updatedPrimaryDetailsElement","target","checkValid","item","length","setState","addItemToCheck","push","removeItemFromCheck","index","filter","ele","i","clientSignUpHandler","preventDefault","data","field","props","customerSignUp","rules","isValid","trim","minLength","componentDidUpdate","prevProps","prevState","auth","error","render","formElements","config","form","map","formElement","analyzeText","color","width","height","textAlign","history","replace","Customer","pending","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport classes from \"./ClientSignUp.module.css\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport customerSignUpAction from \"../../../bloc/auth/customerSignUp\";\nimport {\n    getCustomerError,\n    getCustomerPending,\n    getCustomerSuccess,\n} from \"../../../store/reducer\";\n\nimport Input from \"../../Input/Input\";\nimport Button from \"../../UI/Button/Button\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\nimport { Redirect } from \"react-router-dom\";\n\nclass CustomerSignUp extends Component {\n    state = {\n        primaryDetails: {\n            firstName: {\n                id: \"1\",\n                elementType: \"input\",\n                label: \"First Name\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            lastName: {\n                id: \"2\",\n                elementType: \"input\",\n                label: \"Last Name\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            restaurantName: {\n                id: \"3\",\n                elementType: \"input\",\n                label: \"Restaurant Name\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            username: {\n                id: \"4\",\n                elementType: \"input\",\n                label: \"User Name\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            password: {\n                id: \"5\",\n                elementType: \"input\",\n                label: \"Password\",\n                elementConfig: {\n                    type: \"password\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            cusines: {\n                id: \"6\",\n                elementType: \"input\",\n                label: \"Cusines\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                },\n                tagHandler: true,\n                selected: [],\n                value: \"\",\n                actions: true,\n                isTag:true,\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n\n        formIsValid: false,\n        errorText: \"\"\n    };\n    checkValid(value, rules) {\n        let isValid = false;\n        if (rules && rules.required) {\n            isValid = value.trim() !== \"\";\n        }\n        if (rules && rules.minLength) {\n            isValid = isValid && value.trim().length >= rules.minLength;\n        }\n\n        return isValid;\n    }\n\n    changeHandler = (event, identifierElement) => {\n        const updatedPrimaryDetails = {\n            ...this.state.primaryDetails,\n        };\n\n        const updatedPrimaryDetailsElement = {\n            ...updatedPrimaryDetails[identifierElement],\n        };\n\n        updatedPrimaryDetailsElement.value = event.target.value;\n        updatedPrimaryDetailsElement.valid = this.checkValid(\n            updatedPrimaryDetailsElement.value,\n            updatedPrimaryDetailsElement.validation\n        );\n        updatedPrimaryDetailsElement.touched = true;\n        updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n\n        let formIsValid = true;\n        for (const item in updatedPrimaryDetails) {\n            if (updatedPrimaryDetails[item].tagHandler) {\n                formIsValid =\n                    updatedPrimaryDetails[item].selected.length > 0 &&\n                    formIsValid;\n                continue;\n            }\n            formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n        }\n\n        this.setState({\n            primaryDetails: updatedPrimaryDetails,\n            formIsValid: formIsValid,\n        });\n    };\n\n    addItemToCheck = (identifierElement) => {\n        if (this.state.primaryDetails[identifierElement].valid) {\n            const updatedPrimaryDetails = {\n                ...this.state.primaryDetails,\n            };\n\n            const updatedPrimaryDetailsElement = {\n                ...updatedPrimaryDetails[identifierElement],\n            };\n\n            updatedPrimaryDetailsElement.selected.push(\n                updatedPrimaryDetailsElement.value\n            );\n            updatedPrimaryDetailsElement.value = \"\";\n            updatedPrimaryDetailsElement.valid = false;\n            updatedPrimaryDetailsElement.touched = false;\n            updatedPrimaryDetails[\n                identifierElement\n            ] = updatedPrimaryDetailsElement;\n            let formIsValid = true;\n            for (const item in updatedPrimaryDetails) {\n                if (typeof updatedPrimaryDetails[item] === \"string\") continue;\n                if (updatedPrimaryDetails[item].tagHandler) {\n                    formIsValid =\n                        updatedPrimaryDetails[item].selected.length > 0 &&\n                        formIsValid;\n                    continue;\n                }\n                formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n            }\n\n            this.setState({\n                primaryDetails: updatedPrimaryDetails,\n                formIsValid: formIsValid,\n            });\n        }\n    };\n\n    removeItemFromCheck = (index, identifierElement) => {\n        const updatedPrimaryDetails = {\n            ...this.state.primaryDetails,\n        };\n\n        const updatedPrimaryDetailsElement = {\n            ...updatedPrimaryDetails[identifierElement],\n        };\n\n        updatedPrimaryDetailsElement.selected = this.state.primaryDetails[\n            identifierElement\n        ].selected.filter((ele, i) => i !== index);\n\n        updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n\n        let formIsValid = true;\n\n        for (const item in updatedPrimaryDetails) {\n            if (updatedPrimaryDetails[item].tagHandler) {\n                formIsValid =\n                    updatedPrimaryDetails[item].selected.length > 0 &&\n                    formIsValid;\n                continue;\n            }\n            formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n        }\n\n        this.setState({\n            primaryDetails: updatedPrimaryDetails,\n            formIsValid: formIsValid,\n        });\n    };\n\n    clientSignUpHandler = (event) => {\n        event.preventDefault();\n        const data = {};\n\n        for (let field in this.state.primaryDetails) {\n            if (this.state.primaryDetails[field].isTag) {\n                data[field] = this.state.primaryDetails[field].selected;\n                continue;\n            }\n            data[field] = this.state.primaryDetails[field].value;\n        }\n\n        data[\"accountType\"] = \"Restaurant\";\n\n        \n\n        this.props.customerSignUp(data);\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.auth !== prevProps.auth) {\n            this.setState({ auth: true });\n            \n            // setTimeout(() => {\n            //     this.props.cancel();\n            //     setTimeout(() => {\n            //         this.props.change();\n            //     }, 500);\n            // }, 1500);\n            \n        } else if (this.props.error !== prevProps.error) {\n            this.setState({\n                errorText: \"UserName is already taken.\",\n            });\n            const updatedPrimaryDetails = {\n                ...this.state.primaryDetails,\n            };\n            for (let field in updatedPrimaryDetails) {\n                updatedPrimaryDetails[field].value = \"\";\n            }\n\n            this.setState({\n                primaryDetails: updatedPrimaryDetails,\n                formIsValid: false,\n            });\n        }\n\n    }\n\n    render() {\n        let formElements = [];\n\n        for (let item in this.state.primaryDetails) {\n            formElements.push({\n                id: item,\n                config: this.state.primaryDetails[item],\n            });\n        }\n\n        let form = formElements.map((formElement) => {\n            return (\n                <Input\n                    key={formElement.id}\n                    changed={(event) =>\n                        this.changeHandler(event, formElement.id)\n                    }\n                    label={formElement.config.label}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    addTag={() => this.addItemToCheck(formElement.id)}\n                    removeTag={(index) => {\n                        this.removeItemFromCheck(index, formElement.id);\n                    }}\n                    isTag={formElement.config.tagHandler}\n                    selected={formElement.config.selected}\n                    analyzeText={formElement.config.analyzeText}\n                    shouldValidate={formElement.config.validation}\n                    invalid={!formElement.config.valid}\n                    touched={formElement.config.touched}\n                    actions={formElement.config.actions}\n                />\n            );\n        });\n        if (this.state.auth) {\n            form = (\n                <h1\n                    style={{\n                        color: \"green\",\n                        width: \"100%\",\n                        height: \"20rem\",\n                        textAlign: \"center\",\n                    }}\n                >\n                    {\" \"}\n                    Successfully Registered\n                </h1>\n            );\n            this.props.history.replace(\"/\");\n        }\n\n\n        return (\n            <form className={classes.Customer}>\n                <h5>{this.state.errorText}</h5>\n                {form}\n                <Button\n                    fill\n                    disabled={!this.state.formIsValid}\n                    config={{ type: \"button\" }}\n                    clicked={(event) => this.clientSignUpHandler(event)}\n                    name={this.props.pending ? <Spinner /> : \"Sign Up\"}\n                />\n                {/* <h3>\n                    Already registered!!??{\" \"}\n                    <div onClick={this.props.change}>Sing In here!</div>\n                </h3> */}\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    error: getCustomerError(state),\n    pending: getCustomerPending(state),\n    auth: getCustomerSuccess(state),\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            customerSignUp: customerSignUpAction,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerSignUp);\n"]},"metadata":{},"sourceType":"module"}