{"ast":null,"code":"var _jsxFileName = \"/Users/nishantrana/Downloads/FoodShala-master/src/components/Cart/Cart.js\";\nimport React, { Component } from \"react\";\nimport { getCart, getUser, checkoutError, checkoutPending, checkoutSuccess } from \"../../store/reducer\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { addItemToCart, clearCart } from \"../../store/action\";\nimport checkoutAction from \"../../bloc/checkout\";\nimport { withRouter } from \"react-router-dom\";\nimport RestaurantMenuItem from \"../RestaurantMenu/RestaurantMenuItem/RestaurantMenuItem\";\nimport classes from \"./Cart.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport Modal from \"../UI/Modal/Modal\";\n\nclass Cart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      price: null,\n      modal: {\n        show: false,\n        data: \"\"\n      }\n    };\n\n    this.addItemHandler = product => {\n      const updatedProduct = { ...this.state.products\n      };\n      ++updatedProduct[product].quantity;\n      this.setState({\n        products: updatedProduct,\n        price: this.state.price + updatedProduct[product].price\n      });\n      this.props.addItemToCart(this.state.products[product]);\n    };\n\n    this.removeItemHandler = product => {\n      const updatedProduct = { ...this.state.products\n      };\n      --updatedProduct[product].quantity;\n      let price = updatedProduct[product].price;\n\n      if (updatedProduct[product].quantity <= 0) {\n        delete updatedProduct[product];\n      }\n\n      this.setState({\n        products: updatedProduct,\n        price: this.state.price - price\n      });\n      this.props.addItemToCart(this.state.products[product]);\n    };\n\n    this.goToMenu = () => {\n      this.props.history.replace(\"/\");\n    };\n\n    this.checkOutHandler = () => {\n      if (!this.props.user) {\n        this.props.showModal();\n      } else {\n        let uniqueRestaurant;\n        let restaurants = [];\n\n        for (const item in this.state.products) {\n          restaurants.push(this.state.products[item].restaurantId);\n        }\n\n        uniqueRestaurant = restaurants[0];\n\n        for (let item of restaurants) {\n          if (uniqueRestaurant !== item) {\n            const updatedModal = { ...this.state.modal\n            };\n            updatedModal.show = true;\n            updatedModal.data = \"Please choose items from unique restaurant :)\";\n            this.setState({\n              modal: updatedModal\n            });\n            return;\n          }\n        }\n\n        const data = {};\n        data[\"restaurantId\"] = uniqueRestaurant;\n        data[\"userId\"] = this.props.user._id;\n        data[\"price\"] = this.state.price;\n        data[\"products\"] = this.state.products;\n        data[\"status\"] = \"pending\";\n        this.props.checkOutHandler(data, this.props.user);\n      }\n    };\n\n    this.popModal = () => {\n      const updatedModal = {\n        show: false,\n        data: \"\"\n      };\n      this.setState({\n        modal: updatedModal\n      });\n    };\n  }\n\n  componentDidMount() {\n    const products = {};\n    let totalPrice = 0;\n\n    for (const product in this.props.products) {\n      products[product] = {\n        id: product,\n        name: this.props.products[product].name,\n        description: this.props.products[product].description,\n        quantity: this.props.products[product].quantity,\n        price: this.props.products[product].price,\n        restaurantId: this.props.products[product].restaurantId\n      };\n      totalPrice += this.props.products[product].price * this.props.products[product].quantity;\n    }\n\n    this.setState({\n      products,\n      price: totalPrice\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.checkout !== this.props.checkout) {\n      if (this.props.checkout === true) {\n        const modal = {\n          show: true,\n          data: `You have successfully placed your order..\n                    \n                    Please view the My Orders page check your orders`\n        };\n        this.setState({\n          modal,\n          products: {}\n        });\n        this.props.clearCart();\n      }\n    }\n\n    if (prevProps.checkoutError !== this.props.checkoutError) {\n      if (this.props.checkoutError === true) {\n        const modal = {\n          show: true,\n          data: `Something went wrong\n                     \n                     Please try refreshing`\n        };\n        this.setState({\n          modal\n        });\n      }\n    }\n\n    if (prevProps.checkoutPending !== this.props.checkoutPending) {\n      if (this.props.checkoutError === true) {\n        const modal = {\n          show: true,\n          data: `Please wait while we place your order`\n        };\n        this.setState({\n          modal\n        });\n      }\n    }\n  }\n\n  render() {\n    const restaurant = this.props.restaurant;\n\n    if (restaurant === null) {\n      this.props.history.replace(\"/\");\n      return null;\n    }\n\n    let products = [];\n\n    for (const product in this.state.products) {\n      products.push({\n        id: product,\n        ...this.state.products[product]\n      });\n    }\n\n    let productItems = [];\n    products.forEach(product => {\n      if (product.quantity !== 0) productItems.push( /*#__PURE__*/React.createElement(RestaurantMenuItem, {\n        key: product.id,\n        removeItemHandler: () => this.removeItemHandler(product.id),\n        addItemHandler: () => this.addItemHandler(product.id),\n        product: product,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }\n      }));\n    });\n\n    if (productItems.length === 0) {\n      productItems = /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }\n      }, \"No Item added to cart\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n        onClick: this.goToMenu,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }\n      }, \"F O O D S H A L A\"));\n    }\n\n    let mainContent = /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.RestaurantMenu,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, \"Checkout To Place Your Order\"), productItems, productItems.length ? /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        position: \"absolute\",\n        bottom: \"90px\",\n        right: \"16px\",\n        fontsize: \"30px\",\n        margin: \"auto\",\n        color: \"Brown\",\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 25\n      }\n    }, \"Total Price : \", this.state.price, /*#__PURE__*/React.createElement(Button, {\n      fill: true,\n      clicked: this.checkOutHandler,\n      name: \"Checkout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 29\n      }\n    }))) : null);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, mainContent);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  products: getCart(state),\n  user: getUser(state),\n  checkout: checkoutSuccess(state),\n  checkoutPending: checkoutPending(state),\n  checkoutError: checkoutError(state)\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  addItemToCart: addItemToCart,\n  checkOutHandler: checkoutAction,\n  clearCart: clearCart\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Cart));","map":{"version":3,"sources":["/Users/nishantrana/Downloads/FoodShala-master/src/components/Cart/Cart.js"],"names":["React","Component","getCart","getUser","checkoutError","checkoutPending","checkoutSuccess","connect","bindActionCreators","addItemToCart","clearCart","checkoutAction","withRouter","RestaurantMenuItem","classes","Button","Modal","Cart","state","price","modal","show","data","addItemHandler","product","updatedProduct","products","quantity","setState","props","removeItemHandler","goToMenu","history","replace","checkOutHandler","user","showModal","uniqueRestaurant","restaurants","item","push","restaurantId","updatedModal","_id","popModal","componentDidMount","totalPrice","id","name","description","componentDidUpdate","prevProps","prevState","checkout","render","restaurant","productItems","forEach","length","mainContent","RestaurantMenu","position","bottom","right","fontsize","margin","color","textAlign","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport {\n    getCart,\n    getUser,\n    checkoutError,\n    checkoutPending,\n    checkoutSuccess,\n} from \"../../store/reducer\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { addItemToCart, clearCart } from \"../../store/action\";\nimport checkoutAction from \"../../bloc/checkout\";\n\nimport { withRouter } from \"react-router-dom\";\n\nimport RestaurantMenuItem from \"../RestaurantMenu/RestaurantMenuItem/RestaurantMenuItem\";\n\nimport classes from \"./Cart.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport Modal from \"../UI/Modal/Modal\";\n\nclass Cart extends Component {\n    state = {\n        price: null,\n        modal: {\n            show: false,\n            data: \"\",\n        },\n    };\n\n    componentDidMount() {\n        const products = {};\n        let totalPrice = 0;\n        for (const product in this.props.products) {\n            products[product] = {\n                id: product,\n                name: this.props.products[product].name,\n                description: this.props.products[product].description,\n                quantity: this.props.products[product].quantity,\n                price: this.props.products[product].price,\n                restaurantId: this.props.products[product].restaurantId,\n            };\n            totalPrice +=\n                this.props.products[product].price *\n                this.props.products[product].quantity;\n        }\n\n        this.setState({\n            products,\n            price: totalPrice,\n        });\n    }\n\n    addItemHandler = (product) => {\n        const updatedProduct = { ...this.state.products };\n        ++updatedProduct[product].quantity;\n\n        this.setState({\n            products: updatedProduct,\n            price: this.state.price + updatedProduct[product].price,\n        });\n\n        this.props.addItemToCart(this.state.products[product]);\n    };\n    removeItemHandler = (product) => {\n        const updatedProduct = { ...this.state.products };\n        --updatedProduct[product].quantity;\n        let price = updatedProduct[product].price;\n        if (updatedProduct[product].quantity <= 0) {\n            delete updatedProduct[product];\n        }\n\n        this.setState({\n            products: updatedProduct,\n            price: this.state.price - price,\n        });\n\n        this.props.addItemToCart(this.state.products[product]);\n    };\n\n    goToMenu = () => {\n        this.props.history.replace(\"/\");\n    };\n\n    checkOutHandler = () => {\n        if (!this.props.user) {\n            this.props.showModal();\n        } else {\n            let uniqueRestaurant;\n            let restaurants = [];\n            for (const item in this.state.products) {\n                restaurants.push(this.state.products[item].restaurantId);\n            }\n            uniqueRestaurant = restaurants[0];\n            for (let item of restaurants) {\n                if (uniqueRestaurant !== item) {\n                    const updatedModal = { ...this.state.modal };\n                    updatedModal.show = true;\n                    updatedModal.data =\n                        \"Please choose items from unique restaurant :)\";\n                    this.setState({ modal: updatedModal });\n                    return;\n                }\n            }\n\n            const data = {};\n            data[\"restaurantId\"] = uniqueRestaurant;\n            data[\"userId\"] = this.props.user._id;\n            data[\"price\"] = this.state.price;\n            data[\"products\"] = this.state.products;\n            data[\"status\"] = \"pending\";\n\n\n            this.props.checkOutHandler(data, this.props.user);\n        }\n    };\n\n    popModal = () => {\n        const updatedModal = { show: false, data: \"\" };\n        this.setState({ modal: updatedModal });\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if (prevProps.checkout !== this.props.checkout) {\n            if (this.props.checkout === true) {\n                const modal = {\n                    show: true,\n                    data: `You have successfully placed your order..\n                    \n                    Please view the My Orders page check your orders`,\n                };\n                this.setState({ modal, products: {} });\n\n                this.props.clearCart();\n            }\n        }\n\n        if (prevProps.checkoutError !== this.props.checkoutError) {\n            if (this.props.checkoutError === true) {\n                const modal = {\n                    show: true,\n                    data: `Something went wrong\n                     \n                     Please try refreshing`,\n                };\n                this.setState({ modal });\n            }\n        }\n\n        if (prevProps.checkoutPending !== this.props.checkoutPending) {\n            if (this.props.checkoutError === true) {\n                const modal = {\n                    show: true,\n                    data: `Please wait while we place your order`,\n                };\n                this.setState({ modal });\n            }\n        }\n    }\n\n    render() {\n        const restaurant = this.props.restaurant;\n\n        if (restaurant === null) {\n            this.props.history.replace(\"/\");\n            return null;\n        }\n\n        let products = [];\n\n        for (const product in this.state.products) {\n            products.push({\n                id: product,\n                ...this.state.products[product],\n            });\n        }\n\n        let productItems = [];\n\n        products.forEach((product) => {\n            if (product.quantity !== 0)\n                productItems.push(\n                    <RestaurantMenuItem\n                        key={product.id}\n                        removeItemHandler={() =>\n                            this.removeItemHandler(product.id)\n                        }\n                        addItemHandler={() => this.addItemHandler(product.id)}\n                        product={product}\n                    />\n                );\n        });\n\n        if (productItems.length === 0) {\n            productItems = (\n                <h2>\n                    No Item added to cart{\" \"}\n                    <span onClick={this.goToMenu}>F O O D S H A L A</span>\n                </h2>\n            );\n        }\n\n        let mainContent = (\n            <div className={classes.RestaurantMenu}>\n                <h2>Checkout To Place Your Order</h2>\n                {productItems}\n                {productItems.length ? (\n                    <React.Fragment>\n                        <h1\n                            style={{\n                                position: \"absolute\",\n                                bottom: \"90px\",\n                                   right: \"16px\",\n                                  fontsize: \"30px\",\n                                margin: \"auto\",\n                                color: \"Brown\",\n                                textAlign: \"center\",\n                            }}\n                        >\n                            Total Price : {this.state.price}\n                            <Button\n                            fill\n                            clicked={this.checkOutHandler}\n                            name=\"Checkout\"\n                        />\n                        </h1>\n                        \n                    </React.Fragment>\n                ) : null}\n            </div>\n        );\n\n        return (\n            <React.Fragment>\n                {/* <Modal show={this.state.modal.show} popModal={this.popModal}>\n                    {this.state.modal.data}\n                </Modal> */}\n                {mainContent}\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    products: getCart(state),\n    user: getUser(state),\n    checkout: checkoutSuccess(state),\n    checkoutPending: checkoutPending(state),\n    checkoutError: checkoutError(state),\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            addItemToCart: addItemToCart,\n            checkOutHandler: checkoutAction,\n            clearCart: clearCart,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Cart));\n"]},"metadata":{},"sourceType":"module"}