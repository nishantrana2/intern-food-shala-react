{"ast":null,"code":"var _jsxFileName = \"/Users/nishantrana/Downloads/FoodShala-master/src/container/ExploreBuilder/SignInForm/SignInForm.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./SignInForm.module.css\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport userSigninAction from \"../../bloc/auth/SignIn\";\nimport fetchClientsAction from '../../bloc/fetchClients';\nimport { getUser, getUserError, getUserPending } from \"../../store/reducer\";\nimport { withRouter } from \"react-router-dom\";\nimport Input from \"../../../components/Input/Input\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\n\nclass SignInForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      primaryDetails: {\n        username: {\n          id: \"1\",\n          elementType: \"input\",\n          label: \"User Name\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          id: \"2\",\n          elementType: \"input\",\n          label: \"Password\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Value\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        accountType: {\n          id: \"3\",\n          elementType: \"select\",\n          label: \"Account Type\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Value\",\n            option: [{\n              value: \"\",\n              displayValue: \"Value\"\n            }, {\n              value: \"Customer\",\n              displayValue: \"Customer\"\n            }, {\n              value: \"Restaurant\",\n              displayValue: \"Restaurant\"\n            }]\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      errorText: \"\"\n    };\n\n    this.changeHandler = (event, identifierElement) => {\n      const updatedPrimaryDetails = { ...this.state.primaryDetails\n      };\n      const updatedPrimaryDetailsElement = { ...updatedPrimaryDetails[identifierElement]\n      };\n      updatedPrimaryDetailsElement.value = event.target.value;\n      updatedPrimaryDetailsElement.valid = this.checkValid(updatedPrimaryDetailsElement.value, updatedPrimaryDetailsElement.validation);\n      updatedPrimaryDetailsElement.touched = true;\n      updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n      let formIsValid = true;\n\n      for (const item in updatedPrimaryDetails) {\n        formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n      }\n\n      this.setState({\n        primaryDetails: updatedPrimaryDetails,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.signInHandler = event => {\n      const data = {\n        username: this.state.primaryDetails.username.value,\n        password: this.state.primaryDetails.password.value\n      };\n      const {\n        userSignin\n      } = this.props;\n      userSignin(data, this.state.primaryDetails.accountType.value);\n    };\n  }\n\n  checkValid(value, rules) {\n    let isValid = false;\n\n    if (rules && rules.required) {\n      isValid = value.trim() !== \"\";\n    }\n\n    if (rules && rules.minLength) {\n      isValid = isValid && value.trim().length >= rules.minLength;\n    }\n\n    return isValid;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.user !== this.props.user) {\n      this.props.fetchClients();\n      this.props.history.replace(\"/\");\n    }\n\n    if (this.props.error !== prevProps.error && this.props.error !== null && this.state.formIsValid) {\n      this.setState({\n        errorText: \"Username or password is incorrect\"\n      });\n      const updatedPrimaryDetails = { ...this.state.primaryDetails\n      };\n      this.props.fetchClients();\n      updatedPrimaryDetails.password.value = \"\";\n      updatedPrimaryDetails.username.value = \"\";\n      this.setState({\n        primaryDetails: updatedPrimaryDetails,\n        formIsValid: false\n      });\n    }\n  }\n\n  render() {\n    let formElements = [];\n\n    for (let item in this.state.primaryDetails) {\n      formElements.push({\n        id: item,\n        config: this.state.primaryDetails[item]\n      });\n    }\n\n    let form = formElements.map(formElement => {\n      return /*#__PURE__*/React.createElement(Input, {\n        key: formElement.id,\n        changed: event => this.changeHandler(event, formElement.id),\n        label: formElement.config.label,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        shouldValidate: formElement.config.validation,\n        invalid: !formElement.config.valid,\n        touched: formElement.config.touched,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: classes.SignInForm,\n      onSubmit: this.signInHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, this.state.errorText), form, /*#__PURE__*/React.createElement(Button, {\n      fill: true,\n      disabled: !this.state.formIsValid,\n      config: {\n        type: \"button\"\n      },\n      clicked: event => this.signInHandler(event),\n      name: this.props.pending ? /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 48\n        }\n      }) : \"Sign In\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: getUser(state),\n  error: getUserError(state),\n  pending: getUserPending(state)\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  userSignin: userSigninAction,\n  fetchClients: fetchClientsAction\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SignInForm));","map":{"version":3,"sources":["/Users/nishantrana/Downloads/FoodShala-master/src/container/ExploreBuilder/SignInForm/SignInForm.js"],"names":["React","Component","classes","connect","bindActionCreators","userSigninAction","fetchClientsAction","getUser","getUserError","getUserPending","withRouter","Input","Button","Spinner","SignInForm","state","primaryDetails","username","id","elementType","label","elementConfig","type","placeholder","value","validation","required","valid","touched","password","accountType","option","displayValue","formIsValid","errorText","changeHandler","event","identifierElement","updatedPrimaryDetails","updatedPrimaryDetailsElement","target","checkValid","item","setState","signInHandler","data","userSignin","props","rules","isValid","trim","minLength","length","componentDidUpdate","prevProps","prevState","user","fetchClients","history","replace","error","render","formElements","push","config","form","map","formElement","pending","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport classes from \"./SignInForm.module.css\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport userSigninAction from \"../../bloc/auth/SignIn\";\nimport fetchClientsAction from '../../bloc/fetchClients'\nimport { getUser, getUserError, getUserPending } from \"../../store/reducer\";\n\nimport { withRouter } from \"react-router-dom\";\n\nimport Input from \"../../../components/Input/Input\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\n\nclass SignInForm extends Component {\n    state = {\n        primaryDetails: {\n            username: {\n                id: \"1\",\n                elementType: \"input\",\n                label: \"User Name\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            password: {\n                id: \"2\",\n                elementType: \"input\",\n                label: \"Password\",\n                elementConfig: {\n                    type: \"password\",\n                    placeholder: \"Value\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            accountType: {\n                id: \"3\",\n                elementType: \"select\",\n                label: \"Account Type\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Value\",\n                    option: [\n                        { value: \"\", displayValue: \"Value\" },\n                        {\n                            value: \"Customer\",\n                            displayValue: \"Customer\",\n                        },\n                        {\n                            value: \"Restaurant\",\n                            displayValue: \"Restaurant\",\n                        },\n                    ],\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        formIsValid: false,\n        errorText: \"\",\n    };\n\n    checkValid(value, rules) {\n        let isValid = false;\n        if (rules && rules.required) {\n            isValid = value.trim() !== \"\";\n        }\n        if (rules && rules.minLength) {\n            isValid = isValid && value.trim().length >= rules.minLength;\n        }\n\n        return isValid;\n    }\n\n    changeHandler = (event, identifierElement) => {\n        const updatedPrimaryDetails = {\n            ...this.state.primaryDetails,\n        };\n\n        const updatedPrimaryDetailsElement = {\n            ...updatedPrimaryDetails[identifierElement],\n        };\n\n        updatedPrimaryDetailsElement.value = event.target.value;\n        updatedPrimaryDetailsElement.valid = this.checkValid(\n            updatedPrimaryDetailsElement.value,\n            updatedPrimaryDetailsElement.validation\n        );\n        updatedPrimaryDetailsElement.touched = true;\n        updatedPrimaryDetails[identifierElement] = updatedPrimaryDetailsElement;\n\n        let formIsValid = true;\n        for (const item in updatedPrimaryDetails) {\n            formIsValid = updatedPrimaryDetails[item].valid && formIsValid;\n        }\n\n        this.setState({\n            primaryDetails: updatedPrimaryDetails,\n            formIsValid: formIsValid,\n        });\n    };\n\n    signInHandler = (event) => {\n        const data = {\n            username: this.state.primaryDetails.username.value,\n            password: this.state.primaryDetails.password.value,\n        };\n        const { userSignin } = this.props;\n\n        userSignin(data, this.state.primaryDetails.accountType.value);\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.user !== this.props.user) {\n            \n            this.props.fetchClients();\n            this.props.history.replace(\"/\");\n        }\n        if (\n            this.props.error !== prevProps.error &&\n            this.props.error !== null &&\n            this.state.formIsValid\n        ) {\n            this.setState({ errorText: \"Username or password is incorrect\" });\n            const updatedPrimaryDetails = {\n                ...this.state.primaryDetails,\n            };\n            this.props.fetchClients()\n            updatedPrimaryDetails.password.value = \"\";\n            updatedPrimaryDetails.username.value = \"\";\n            this.setState({\n                primaryDetails: updatedPrimaryDetails,\n                formIsValid: false,\n            });\n        }\n    }\n\n    render() {\n        let formElements = [];\n\n        for (let item in this.state.primaryDetails) {\n            formElements.push({\n                id: item,\n                config: this.state.primaryDetails[item],\n            });\n        }\n\n        let form = formElements.map((formElement) => {\n            return (\n                <Input\n                    key={formElement.id}\n                    changed={(event) =>\n                        this.changeHandler(event, formElement.id)\n                    }\n                    label={formElement.config.label}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    shouldValidate={formElement.config.validation}\n                    invalid={!formElement.config.valid}\n                    touched={formElement.config.touched}\n                />\n            );\n        });\n        return (\n            <form className={classes.SignInForm} onSubmit={this.signInHandler}>\n                <h5>{this.state.errorText}</h5>\n                {form}\n                <Button\n                    fill\n                    disabled={!this.state.formIsValid}\n                    config={{ type: \"button\" }}\n                    clicked={(event) => this.signInHandler(event)}\n                    name={this.props.pending ? <Spinner /> : \"Sign In\"}\n                />\n                \n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    user: getUser(state),\n    error: getUserError(state),\n    pending: getUserPending(state),\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            userSignin: userSigninAction,\n            fetchClients: fetchClientsAction\n        },\n        dispatch\n    );\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(SignInForm));\n"]},"metadata":{},"sourceType":"module"}